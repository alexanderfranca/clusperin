import configparser
import os
import pprint
from os.path import expanduser
from AnendbFileSystem import *
from pkg_resources import get_distribution
import re
import sys


class Config:
    """
    Loads, check consistency and offer configuration parameters from the anendb.conf file.
    """

    conf = None
    configurationFile = None
    expectedConfigs = {} 

    def __init__( self ):

        self.afs = AnendbFileSystem()

        self.expectedConfigs = { 'files': [ 'empty' ], 'directories': [ 'inserts' ] }


    def loadConfiguration( self ):
        """
        Load the configurations from the anendb.conf file.
        """

        self.conf = configparser.ConfigParser()

        if not self.getConfigurationFile():
            confFile = './conf/anendb.conf' 
            self.setConfigurationFile( confFile )
        else:
            confFile = self.getConfigurationFile()

        # Actual read the configurations.
        self.conf.read( confFile )


    def setConfigurationFile( self, conf_file=None ):
        """
        Set the current anendb.conf file.

        Args:
            conf_file(str): Full path for the anendb.conf
        
        """

        self.configurationFile = conf_file


    def getPackageInfo( self ):
        """
        Returns package KeggReader metadata.

        The metadata is found in the 'PKG-INFO' file generated by setuptools, which used the setup.py file.

        Example:
        ::

            {'Author': 'Franca AF (Alexander da Franca Fernandes)',
             'Author-email': 'alexander@francafernandes.com.br',
             'Description': 'KeggReader helps to deal with KEGG local files',
             'Home-page': 'http://www.sitemaldito.com.br/anendb',
             'License': 'BSD',
             'Metadata-Version': '1.0',
             'Name': 'KeggReader',
             'Platform': 'Linux',
             'Summary': 'KEGG local files data picking',
             'Version': '0.1'}

        Returns:
            (dict): Package metadata.

        """
        pkgData = {}

        pkgInfo = get_distribution('anendb').get_metadata('PKG-INFO')

        rawData = pkgInfo.split("\n")
        rawData.pop()

        reData = re.compile('^(.*?):\s(.*)')
        for data in rawData:
            records = reData.search( data ) 

            key   = records.group(1)
            value = records.group(2)

            pkgData.update( { key: value } ) 

        return pkgData 


    def existsConfigurationFile( self, conf_file=None ):
        """
        Check if the configuration file exists.

        If not, print error message because KeggReader depends on at least one anendb.conf file.

        Args:
            conf_file(str): Full path for the configuration file.

        Returns:
            (boolean): False or True depending on the file existence.

        """

        # Check if the file exists.
        if not self.afs.isFile( conf_file ):
            print( "\n\n" )
            print( '------------------------------------------------------------------------------' )
            print( 'ERROR: Configuration file not found: ' + conf_file )
            print( 'Take a look at the documentation to know how to create anendb.conf file.' )
            print( 'NOTHING, NONE, WILL WORK WITHOUT anendb.conf file.' )

            pkgData = self.getPackageInfo()

            print( 'Read the documentation in the link below: ' )
            print( pkgData['Home-page'] + '/documentation' )
            print( '------------------------------------------------------------------------------' )
            print( "\n\n" )

            return False
        else:
            return True


    def getConfigurationFile( self ):
        """
        Return the configuration file path.

        Returns:
            (str): Full path of the configuration file.
        """

        return self.configurationFile


    def getConfigurations( self ):
        """
        Return the Config object.

        Returns:
            (object): Config object.

        """

        return self.conf

